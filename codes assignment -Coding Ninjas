   \\\\_______CODE FOR BINARY SEARCH________//// SEARCHING ALGORITHMS
  
  public static int binarySearch(int[] arr, int x) {
        int left = 0; // left pointer initialized to 0
        int right = arr.length - 1; // right pointer initialized to length-1

        while (left <= right) {
            int mid = left + (right - left) / 2; // calculate the mid index

            if (arr[mid] == x) { // if element found at mid index, return mid
                return mid;
            } else if (arr[mid] < x) { // if element is greater than mid, search in right half
                left = mid + 1;
            } else { // if element is less than mid, search in left half
                right = mid - 1;
            }
        }

        return -1; // element not found in the array
    }
}


___________//// SELECTION SORT////__________ IN C++ CODE

void selectionSort(int *arr, int n)
{
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i; // assume the first element is the minimum

        // find the minimum element in the unsorted part of the array
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // swap the minimum element with the first element in the unsorted part of the array
        int temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
}





___________//// SELECTION SORT////__________ IN JAVA 

public class Solution {

    public static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i; // assume the first element is the minimum

            // find the minimum element in the unsorted part of the array
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }

            // swap the minimum element with the first element in the unsorted part of the array
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }
    }

}

