   \\\\_______CODE FOR BINARY SEARCH________//// SEARCHING ALGORITHMS
  
  public static int binarySearch(int[] arr, int x) {
        int left = 0; // left pointer initialized to 0
        int right = arr.length - 1; // right pointer initialized to length-1

        while (left <= right) {
            int mid = left + (right - left) / 2; // calculate the mid index

            if (arr[mid] == x) { // if element found at mid index, return mid
                return mid;
            } else if (arr[mid] < x) { // if element is greater than mid, search in right half
                left = mid + 1;
            } else { // if element is less than mid, search in left half
                right = mid - 1;
            }
        }

        return -1; // element not found in the array
    }
}


___________//// SELECTION SORT////__________ IN C++ CODE

void selectionSort(int *arr, int n)
{
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i; // assume the first element is the minimum

        // find the minimum element in the unsorted part of the array
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // swap the minimum element with the first element in the unsorted part of the array
        int temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }
}





___________//// SELECTION SORT////__________ IN JAVA 

public class Solution {

    public static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i; // assume the first element is the minimum

            // find the minimum element in the unsorted part of the array
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }

            // swap the minimum element with the first element in the unsorted part of the array
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }
    }
}




___________//// BUBBLE SORT////__________ IN JAVA 

public class Solution {
     public static void bubbleSort(int[] arr){
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j+1]) {
                    // swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
}




___________//// INSERTION SORT////__________ IN JAVA 

public static void insertionSort(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

___________//// MERGE SORT////__________ IN JAVA 


public static int[] merge(int arr1[], int arr2[]) {
    int n1 = arr1.length;
    int n2 = arr2.length;
    int[] result = new int[n1 + n2];
    int i = 0, j = 0, k = 0;
    while (i < n1 && j < n2) {
        if (arr1[i] <= arr2[j]) {
            result[k] = arr1[i];
            i++;
        } else {
            result[k] = arr2[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        result[k] = arr1[i];
        i++;
        k++;
    }
    while (j < n2) {
        result[k] = arr2[j];
        j++;
        k++;
    }
    return result;
}



              1= <<<<<<....ASSIGNMENTS CODES.>>>>
               
    public class Solution
    {
    public static void sort012(int[] arr)
    {
    	//Your code goes here
          int low = 0;
    int high = arr.length - 1;
    int mid = 0;
    while (mid <= high)
    {
        switch (arr[mid])
        {
            case 0:
                swap(arr, low, mid);
                low++;
                mid++;
                break;
            case 1:
                mid++;
                break;
            case 2:
                swap(arr, mid, high);
                high--;
                break;
        }
    }
}

private static void swap(int[] arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
}


2- <<<<<<....ASSIGNMENTS CODES.>>>> Find Pair With Smallest Difference

#include <bits/stdc++.h>
using namespace std;

int smallestDifferencePair(int arr1[], int n, int arr2[], int m) {
    // Write your code here
    sort(arr1, arr1 + n);
    sort(arr2, arr2 + m);

    int i = 0, j = 0;
    int minDiff = INT_MAX;

    while (i < n && j < m) {
      int diff = abs(arr1[i] - arr2[j]);
      if (diff < minDiff) {
        minDiff = diff;
      }

      if (arr1[i] < arr2[j]) {
        i++;
      } else {
        j++;
      }
    }

    return minDiff;
}



3- <<<<<<....ASSIGNMENTS CODES.>>>>  Count Small

public class Solution {
    public static int[] countS(int n, int m, int []a, int []b) {
        // Write your code here.
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < m; j++) {
                if (b[j] <= a[i]) {
                    count++;
                }
            }
            result[i] = count;
        }
        return result;
    }
}



